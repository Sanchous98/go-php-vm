// Code generated by "stringer -type=Opcode -linecomment"; DO NOT EDIT.

package vm

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ZendNop-0]
	_ = x[ZendAdd-1]
	_ = x[ZendSub-2]
	_ = x[ZendMul-3]
	_ = x[ZendDiv-4]
	_ = x[ZendMod-5]
	_ = x[ZendSl-6]
	_ = x[ZendSr-7]
	_ = x[ZendConcat-8]
	_ = x[ZendBwOr-9]
	_ = x[ZendBwAnd-10]
	_ = x[ZendBwXor-11]
	_ = x[ZendPow-12]
	_ = x[ZendBwNot-13]
	_ = x[ZendBoolNot-14]
	_ = x[ZendBoolXor-15]
	_ = x[ZendIsIdentical-16]
	_ = x[ZendIsNotIdentical-17]
	_ = x[ZendIsEqual-18]
	_ = x[ZendIsNotEqual-19]
	_ = x[ZendIsSmaller-20]
	_ = x[ZendIsSmallerOrEqual-21]
	_ = x[ZendAssign-22]
	_ = x[ZendAssignDim-23]
	_ = x[ZendAssignObj-24]
	_ = x[ZendAssignStaticProp-25]
	_ = x[ZendAssignOp-26]
	_ = x[ZendAssignDimOp-27]
	_ = x[ZendAssignObjOp-28]
	_ = x[ZendAssignStaticPropOp-29]
	_ = x[ZendAssignRef-30]
	_ = x[ZendQmAssign-31]
	_ = x[ZendAssignObjRef-32]
	_ = x[ZendAssignStaticPropRef-33]
	_ = x[ZendPreInc-34]
	_ = x[ZendPreDec-35]
	_ = x[ZendPostInc-36]
	_ = x[ZendPostDec-37]
	_ = x[ZendPreIncStaticProp-38]
	_ = x[ZendPreDecStaticProp-39]
	_ = x[ZendPostIncStaticProp-40]
	_ = x[ZendPostDecStaticProp-41]
	_ = x[ZendJmp-42]
	_ = x[ZendJmpz-43]
	_ = x[ZendJmpnz-44]
	_ = x[ZendJmpzEx-46]
	_ = x[ZendJmpnzEx-47]
	_ = x[ZendCase-48]
	_ = x[ZendCheckVar-49]
	_ = x[ZendSendVarNoRefEx-50]
	_ = x[ZendCast-51]
	_ = x[ZendBool-52]
	_ = x[ZendFastConcat-53]
	_ = x[ZendRopeInit-54]
	_ = x[ZendRopeAdd-55]
	_ = x[ZendRopeEnd-56]
	_ = x[ZendBeginSilence-57]
	_ = x[ZendEndSilence-58]
	_ = x[ZendInitFcallByName-59]
	_ = x[ZendDoFcall-60]
	_ = x[ZendInitFcall-61]
	_ = x[ZendReturn-62]
	_ = x[ZendRecv-63]
	_ = x[ZendRecvInit-64]
	_ = x[ZendSendVal-65]
	_ = x[ZendSendVarEx-66]
	_ = x[ZendSendRef-67]
	_ = x[ZendNew-68]
	_ = x[ZendInitNsFcallByName-69]
	_ = x[ZendFree-70]
	_ = x[ZendInitArray-71]
	_ = x[ZendAddArrayElement-72]
	_ = x[ZendIncludeOrEval-73]
	_ = x[ZendUnsetVar-74]
	_ = x[ZendUnsetDim-75]
	_ = x[ZendUnsetObj-76]
	_ = x[ZendFeResetR-77]
	_ = x[ZendFeFetchR-78]
	_ = x[ZendExit-79]
	_ = x[ZendFetchR-80]
	_ = x[ZendFetchDimR-81]
	_ = x[ZendFetchObjR-82]
	_ = x[ZendFetchW-83]
	_ = x[ZendFetchDimW-84]
	_ = x[ZendFetchObjW-85]
	_ = x[ZendFetchRw-86]
	_ = x[ZendFetchDimRw-87]
	_ = x[ZendFetchObjRw-88]
	_ = x[ZendFetchIs-89]
	_ = x[ZendFetchDimIs-90]
	_ = x[ZendFetchObjIs-91]
	_ = x[ZendFetchFuncArg-92]
	_ = x[ZendFetchDimFuncArg-93]
	_ = x[ZendFetchObjFuncArg-94]
	_ = x[ZendFetchUnset-95]
	_ = x[ZendFetchDimUnset-96]
	_ = x[ZendFetchObjUnset-97]
	_ = x[ZendFetchListR-98]
	_ = x[ZendFetchConstant-99]
	_ = x[ZendCheckFuncArg-100]
	_ = x[ZendExtStmt-101]
	_ = x[ZendExtFcallBegin-102]
	_ = x[ZendExtFcallEnd-103]
	_ = x[ZendExtNop-104]
	_ = x[ZendTicks-105]
	_ = x[ZendSendVarNoRef-106]
	_ = x[ZendCatch-107]
	_ = x[ZendThrow-108]
	_ = x[ZendFetchClass-109]
	_ = x[ZendClone-110]
	_ = x[ZendReturnByRef-111]
	_ = x[ZendInitMethodCall-112]
	_ = x[ZendInitStaticMethodCall-113]
	_ = x[ZendIssetIsemptyVar-114]
	_ = x[ZendIssetIsemptyDimObj-115]
	_ = x[ZendSendValEx-116]
	_ = x[ZendSendVar-117]
	_ = x[ZendInitUserCall-118]
	_ = x[ZendSendArray-119]
	_ = x[ZendSendUser-120]
	_ = x[ZendStrlen-121]
	_ = x[ZendDefined-122]
	_ = x[ZendTypeCheck-123]
	_ = x[ZendVerifyReturnType-124]
	_ = x[ZendFeResetRw-125]
	_ = x[ZendFeFetchRw-126]
	_ = x[ZendFeFree-127]
	_ = x[ZendInitDynamicCall-128]
	_ = x[ZendDoIcall-129]
	_ = x[ZendDoUcall-130]
	_ = x[ZendDoFcallByName-131]
	_ = x[ZendPreIncObj-132]
	_ = x[ZendPreDecObj-133]
	_ = x[ZendPostIncObj-134]
	_ = x[ZendPostDecObj-135]
	_ = x[ZendEcho-136]
	_ = x[ZendOpData-137]
	_ = x[ZendInstanceof-138]
	_ = x[ZendGeneratorCreate-139]
	_ = x[ZendMakeRef-140]
	_ = x[ZendDeclareFunction-141]
	_ = x[ZendDeclareLambdaFunction-142]
	_ = x[ZendDeclareConst-143]
	_ = x[ZendDeclareClass-144]
	_ = x[ZendDeclareClassDelayed-145]
	_ = x[ZendDeclareAnonClass-146]
	_ = x[ZendAddArrayUnpack-147]
	_ = x[ZendIssetIsemptyPropObj-148]
	_ = x[ZendHandleException-149]
	_ = x[ZendUserOpcode-150]
	_ = x[ZendAssertCheck-151]
	_ = x[ZendJmpSet-152]
	_ = x[ZendUnsetCv-153]
	_ = x[ZendIssetIsemptyCv-154]
	_ = x[ZendFetchListW-155]
	_ = x[ZendSeparate-156]
	_ = x[ZendFetchClassName-157]
	_ = x[ZendCallTrampoline-158]
	_ = x[ZendDiscardException-159]
	_ = x[ZendYield-160]
	_ = x[ZendGeneratorReturn-161]
	_ = x[ZendFastCall-162]
	_ = x[ZendFastRet-163]
	_ = x[ZendRecvVariadic-164]
	_ = x[ZendSendUnpack-165]
	_ = x[ZendYieldFrom-166]
	_ = x[ZendCopyTmp-167]
	_ = x[ZendBindGlobal-168]
	_ = x[ZendCoalesce-169]
	_ = x[ZendSpaceship-170]
	_ = x[ZendFuncNumArgs-171]
	_ = x[ZendFuncGetArgs-172]
	_ = x[ZendFetchStaticPropR-173]
	_ = x[ZendFetchStaticPropW-174]
	_ = x[ZendFetchStaticPropRw-175]
	_ = x[ZendFetchStaticPropIs-176]
	_ = x[ZendFetchStaticPropFuncArg-177]
	_ = x[ZendFetchStaticPropUnset-178]
	_ = x[ZendUnsetStaticProp-179]
	_ = x[ZendIssetIsemptyStaticProp-180]
	_ = x[ZendFetchClassConstant-181]
	_ = x[ZendBindLexical-182]
	_ = x[ZendBindStatic-183]
	_ = x[ZendFetchThis-184]
	_ = x[ZendSendFuncArg-185]
	_ = x[ZendIssetIsemptyThis-186]
	_ = x[ZendSwitchLong-187]
	_ = x[ZendSwitchString-188]
	_ = x[ZendInArray-189]
	_ = x[ZendCount-190]
	_ = x[ZendGetClass-191]
	_ = x[ZendGetCalledClass-192]
	_ = x[ZendGetType-193]
	_ = x[ZendArrayKeyExists-194]
	_ = x[ZendMatch-195]
	_ = x[ZendCaseStrict-196]
	_ = x[ZendMatchError-197]
	_ = x[ZendJmpNull-198]
	_ = x[ZendCheckUndefArgs-199]
	_ = x[ZendFetchGlobals-200]
	_ = x[ZendVerifyNeverType-201]
	_ = x[ZendCallableConvert-202]
}

const (
	_Opcode_name_0 = "ZEND_NOPZEND_ADDZEND_SUBZEND_MULZEND_DIVZEND_MODZEND_SLZEND_SRZEND_CONCATZEND_BW_ORZEND_BW_ANDZEND_BW_XORZEND_POWZEND_BW_NOTZEND_BOOL_NOTZEND_BOOL_XORZEND_IS_IDENTICALZEND_IS_NOT_IDENTICALZEND_IS_EQUALZEND_IS_NOT_EQUALZEND_IS_SMALLERZEND_IS_SMALLER_OR_EQUALZEND_ASSIGNZEND_ASSIGN_DIMZEND_ASSIGN_OBJZEND_ASSIGN_STATIC_PROPZEND_ASSIGN_OPZEND_ASSIGN_DIM_OPZEND_ASSIGN_OBJ_OPZEND_ASSIGN_STATIC_PROP_OPZEND_ASSIGN_REFZEND_QM_ASSIGNZEND_ASSIGN_OBJ_REFZEND_ASSIGN_STATIC_PROP_REFZEND_PRE_INCZEND_PRE_DECZEND_POST_INCZEND_POST_DECZEND_PRE_INC_STATIC_PROPZEND_PRE_DEC_STATIC_PROPZEND_POST_INC_STATIC_PROPZEND_POST_DEC_STATIC_PROPZEND_JMPZEND_JMPZZEND_JMPNZ"
	_Opcode_name_1 = "ZEND_JMPZ_EXZEND_JMPNZ_EXZEND_CASEZEND_CHECK_VARZEND_SEND_VAR_NO_REF_EXZEND_CASTZEND_BOOLZEND_FAST_CONCATZEND_ROPE_INITZEND_ROPE_ADDZEND_ROPE_ENDZEND_BEGIN_SILENCEZEND_END_SILENCEZEND_INIT_FCALL_BY_NAMEZEND_DO_FCALLZEND_INIT_FCALLZEND_RETURNZEND_RECVZEND_RECV_INITZEND_SEND_VALZEND_SEND_VAR_EXZEND_SEND_REFZEND_NEWZEND_INIT_NS_FCALL_BY_NAMEZEND_FREEZEND_INIT_ARRAYZEND_ADD_ARRAY_ELEMENTZEND_INCLUDE_OR_EVALZEND_UNSET_VARZEND_UNSET_DIMZEND_UNSET_OBJZEND_FE_RESET_RZEND_FE_FETCH_RZEND_EXITZEND_FETCH_RZEND_FETCH_DIM_RZEND_FETCH_OBJ_RZEND_FETCH_WZEND_FETCH_DIM_WZEND_FETCH_OBJ_WZEND_FETCH_RWZEND_FETCH_DIM_RWZEND_FETCH_OBJ_RWZEND_FETCH_ISZEND_FETCH_DIM_ISZEND_FETCH_OBJ_ISZEND_FETCH_FUNC_ARGZEND_FETCH_DIM_FUNC_ARGZEND_FETCH_OBJ_FUNC_ARGZEND_FETCH_UNSETZEND_FETCH_DIM_UNSETZEND_FETCH_OBJ_UNSETZEND_FETCH_LIST_RZEND_FETCH_CONSTANTZEND_CHECK_FUNC_ARGZEND_EXT_STMTZEND_EXT_FCALL_BEGINZEND_EXT_FCALL_ENDZEND_EXT_NOPZEND_TICKSZEND_SEND_VAR_NO_REFZEND_CATCHZEND_THROWZEND_FETCH_CLASSZEND_CLONEZEND_RETURN_BY_REFZEND_INIT_METHOD_CALLZEND_INIT_STATIC_METHOD_CALLZEND_ISSET_ISEMPTY_VARZEND_ISSET_ISEMPTY_DIM_OBJZEND_SEND_VAL_EXZEND_SEND_VARZEND_INIT_USER_CALLZEND_SEND_ARRAYZEND_SEND_USERZEND_STRLENZEND_DEFINEDZEND_TYPE_CHECKZEND_VERIFY_RETURN_TYPEZEND_FE_RESET_RWZEND_FE_FETCH_RWZEND_FE_FREEZEND_INIT_DYNAMIC_CALLZEND_DO_ICALLZEND_DO_UCALLZEND_DO_FCALL_BY_NAMEZEND_PRE_INC_OBJZEND_PRE_DEC_OBJZEND_POST_INC_OBJZEND_POST_DEC_OBJZEND_ECHOZEND_OP_DATAZEND_INSTANCEOFZEND_GENERATOR_CREATEZEND_MAKE_REFZEND_DECLARE_FUNCTIONZEND_DECLARE_LAMBDA_FUNCTIONZEND_DECLARE_CONSTZEND_DECLARE_CLASSZEND_DECLARE_CLASS_DELAYEDZEND_DECLARE_ANON_CLASSZEND_ADD_ARRAY_UNPACKZEND_ISSET_ISEMPTY_PROP_OBJZEND_HANDLE_EXCEPTIONZEND_USER_OPCODEZEND_ASSERT_CHECKZEND_JMP_SETZEND_UNSET_CVZEND_ISSET_ISEMPTY_CVZEND_FETCH_LIST_WZEND_SEPARATEZEND_FETCH_CLASS_NAMEZEND_CALL_TRAMPOLINEZEND_DISCARD_EXCEPTIONZEND_YIELDZEND_GENERATOR_RETURNZEND_FAST_CALLZEND_FAST_RETZEND_RECV_VARIADICZEND_SEND_UNPACKZEND_YIELD_FROMZEND_COPY_TMPZEND_BIND_GLOBALZEND_COALESCEZEND_SPACESHIPZEND_FUNC_NUM_ARGSZEND_FUNC_GET_ARGSZEND_FETCH_STATIC_PROP_RZEND_FETCH_STATIC_PROP_WZEND_FETCH_STATIC_PROP_RWZEND_FETCH_STATIC_PROP_ISZEND_FETCH_STATIC_PROP_FUNC_ARGZEND_FETCH_STATIC_PROP_UNSETZEND_UNSET_STATIC_PROPZEND_ISSET_ISEMPTY_STATIC_PROPZEND_FETCH_CLASS_CONSTANTZEND_BIND_LEXICALZEND_BIND_STATICZEND_FETCH_THISZEND_SEND_FUNC_ARGZEND_ISSET_ISEMPTY_THISZEND_SWITCH_LONGZEND_SWITCH_STRINGZEND_IN_ARRAYZEND_COUNTZEND_GET_CLASSZEND_GET_CALLED_CLASSZEND_GET_TYPEZEND_ARRAY_KEY_EXISTSZEND_MATCHZEND_CASE_STRICTZEND_MATCH_ERRORZEND_JMP_NULLZEND_CHECK_UNDEF_ARGSZEND_FETCH_GLOBALSZEND_VERIFY_NEVER_TYPEZEND_CALLABLE_CONVERT"
)

var (
	_Opcode_index_0 = [...]uint16{0, 8, 16, 24, 32, 40, 48, 55, 62, 73, 83, 94, 105, 113, 124, 137, 150, 167, 188, 201, 218, 233, 257, 268, 283, 298, 321, 335, 353, 371, 397, 412, 426, 445, 472, 484, 496, 509, 522, 546, 570, 595, 620, 628, 637, 647}
	_Opcode_index_1 = [...]uint16{0, 12, 25, 34, 48, 71, 80, 89, 105, 119, 132, 145, 163, 179, 202, 215, 230, 241, 250, 264, 277, 293, 306, 314, 340, 349, 364, 386, 406, 420, 434, 448, 463, 478, 487, 499, 515, 531, 543, 559, 575, 588, 605, 622, 635, 652, 669, 688, 711, 734, 750, 770, 790, 807, 826, 845, 858, 878, 896, 908, 918, 938, 948, 958, 974, 984, 1002, 1023, 1051, 1073, 1099, 1115, 1128, 1147, 1162, 1176, 1187, 1199, 1214, 1237, 1253, 1269, 1281, 1303, 1316, 1329, 1350, 1366, 1382, 1399, 1416, 1425, 1437, 1452, 1473, 1486, 1507, 1535, 1553, 1571, 1597, 1620, 1641, 1668, 1689, 1705, 1722, 1734, 1747, 1768, 1785, 1798, 1819, 1839, 1861, 1871, 1892, 1906, 1919, 1937, 1953, 1968, 1981, 1997, 2010, 2024, 2042, 2060, 2084, 2108, 2133, 2158, 2189, 2217, 2239, 2269, 2294, 2311, 2327, 2342, 2360, 2383, 2399, 2417, 2430, 2440, 2454, 2475, 2488, 2509, 2519, 2535, 2551, 2564, 2585, 2603, 2625, 2646}
)

func (i Opcode) String() string {
	switch {
	case 0 <= i && i <= 44:
		return _Opcode_name_0[_Opcode_index_0[i]:_Opcode_index_0[i+1]]
	case 46 <= i && i <= 202:
		i -= 46
		return _Opcode_name_1[_Opcode_index_1[i]:_Opcode_index_1[i+1]]
	default:
		return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
